<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="/public/images/MFav.png" type="image/png" />
    <title><%=title%></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="/public/style/theme.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <%- include("partials/header") %>
    <!-- main -->
    <main>
      <div class="container-fluid">
        <div class="row">
          <div class="col">
            <div class="title py-3 text-primary">Marken</div>
          </div>
        </div>
        <div class="row">
          <div class="col-lg-6 p-0">
            <div class="card border-0 space_object">
              <div class="card-header bg-white py-3">
                <div class="title">Marke hinzufügen</div>
              </div>
              <div class="card-body">
                <form action="/add-brand" method="POST">
                  <div class="mb-3">
                    <label for="brandName" class="form-label">
                      Markenname
                    </label>
                    <input
                      type="text"
                      class="form-control"
                      id="brandName"
                      required
                    />
                  </div>
                  <div class="mb-3">
                    <label
                      for="images"
                      class="form-label file-label"
                      id="toggleFileInput"
                    >
                      <i class="fa-solid fa-plus"></i> Hochladen des Markenlogos
                    </label>
                    <input
                      type="file"
                      class="d-none"
                      name="brandLogo"
                      id="brandLogo"
                      accept="image/*"
                      required
                    />

                    <div class="img-preview mt-3" id="preview"></div>
                  </div>
                  <div class="mb-3">
                    <label for="status" class="form-label"> Status </label>
                    <select class="form-select" id="status">
                      <option value="active">Aktiv</option>
                      <option value="inactive">Inaktiv</option>
                    </select>
                  </div>
                  <div class="form-alert success d-none" id="successAlert">
                    Marke erfolgreich hinzugefügt!
                  </div>
                  <div class="form-alert d-none error" id="errorAlert">
                    Fehler beim Hinzufügen der Marke
                  </div>
                  <button
                    type="button"
                    id="addBrandBtn"
                    class="btn btn-primary mt-2 mb-2"
                  >
                    Marke hinzufügen
                  </button>
                </form>
              </div>
            </div>
          </div>
          <div class="col-lg-6 p-0 mb-4">
            <div class="card border-0 space_object">
              <div class="card-header bg-white py-3">
                <div class="title">BMarkenliste</div>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>Bild</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Aktion</th>
                      </tr>
                    </thead>
                    <tbody id="brandTable">
                      <% brands.forEach(function(brand) { %>
                      <tr>
                        <td>
                          <% if(brand.brandLogo || !brand.brandLogo == "") {%>
                          <img
                            class="pro-avatar"
                            src="<%- BASE_URL %>/uploads/<%- brand.brandLogo %>"
                            alt=""
                          />
                          <% } else {%>
                          <div class="noimg">No img</div>
                          <%}%>
                        </td>
                        <td><%- brand.brandName %></td>
                        <td>
                          <span
                            class="status <%- brand.status %> text-capitalize"
                            ><%- brand.status %></span
                          >
                        </td>
                        <td>
                          <div class="form-check form-switch">
                            <input class="form-check-input status-switch"
                            type="checkbox" role="switch" id="<%- brand._id %>"
                            <% if(brand.status === 'active') { %> checked <% }
                            %> />
                          </div>
                        </td>
                      </tr>
                      <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
    <!-- main end -->
    <div class="custom-toast d-none"></div>
    <!-- js -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script src="/public/config.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/public/js/theme.js"></script>
    <script>
      document
        .getElementById("toggleFileInput")
        .addEventListener("click", function () {
          document.getElementById("brandLogo").click();
        });

      // Listen for file selection on the file input
      document
        .getElementById("brandLogo")
        .addEventListener("change", function (e) {
          setLoading(true); // Set loading state

          // Since only a single file is handled, directly work with the selected file
          const file = e.target.files[0]; // Get the first (and only) file

          if (file) {
            const reader = new FileReader();
            reader.onloadend = function () {
              // Once the file is loaded, reset loading state and update previews
              setLoading(false);
              updatePreview(reader.result); // Pass the file's data URL to the updatePreview function
            };
            reader.readAsDataURL(file);
          } else {
            // In case no file was selected
            setLoading(false);
          }
        });

      function updatePreview(dataUrl) {
        const previewContainer = document.getElementById("preview");

        // Clear the preview container's inner HTML if no data URL is provided (i.e., reset or delete action)
        if (!dataUrl) {
          previewContainer.innerHTML = "";
          return;
        }

        // If a data URL is provided, create and append the new preview item
        const previewItem = document.createElement("div");
        previewItem.classList.add("preview-item");

        previewItem.innerHTML = `
    <img src="${dataUrl}" alt="preview"/>
    <div class="remove-img" onclick="removePreview()"><i class="fa-solid fa-trash"></i></div>
  `;

        previewContainer.appendChild(previewItem);
      }
      function removePreview() {
        setLoading(true); // Optionally set loading state
        document.getElementById("brandLogo").value = ""; // Reset file input
        updatePreview(null); // Clear the preview by not providing a data URL
        setLoading(false); // Optionally reset loading state
      }
      function setLoading(loading) {
        const label = document.getElementById("toggleFileInput");
        if (loading) {
          label.textContent = "Wird geladen..."; // Set label to Loading... during operation
        } else {
          label.innerHTML = '<i class="fa-solid fa-plus"></i> Bild hinzufügen'; // Reset label after operation
        }
      }
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        function getCookie(name) {
          let cookieValue = null;
          if (document.cookie && document.cookie !== "") {
            const cookies = document.cookie.split(";");
            for (let i = 0; i < cookies.length; i++) {
              const cookie = cookies[i].trim();
              if (cookie.substring(0, name.length + 1) === name + "=") {
                cookieValue = decodeURIComponent(
                  cookie.substring(name.length + 1)
                );
                break;
              }
            }
          }
          return cookieValue;
        }

        // Retrieve the loginToken from cookies
        const loginToken = getCookie("loginToken");

        // Prepare the Axios request configuration, including the Authorization header
        const config = {
          headers: {
            Authorization: `Bearer ${loginToken}`,
            "Content-Type": "application/json",
          },
        };

        const brandSubmit = document.getElementById("addBrandBtn");

        brandSubmit.addEventListener("click", function () {
          brandSubmit.textContent = "Adding..";

          const formData = new FormData();
          formData.append(
            "brandName",
            document.getElementById("brandName").value.trim()
          );
          formData.append("status", document.getElementById("status").value);

          const brandLogo = document.getElementById("brandLogo").files[0];
          if (brandLogo) {
            formData.append("brandLogo", brandLogo);
          }

          axios
            .post(`${API_URL}/add-brand`, formData, {
              headers: {
                Authorization: `Bearer ${loginToken}`,
              },
            })
            .then(function (response) {
              const brand = response.data.brand;
              const brandName = brand.brandName; // Now correctly accessing the nested property
              const brandStatus = brand.status; // Now correctly accessing the nested property
              const brandLogoUrl = brand.brandLogo; // Assuming this is a relative URL to the logo image

              // Assuming the logo needs to be accessed via a full URL path
              // Adjust `baseUrl` to the directory where images are served from
              const baseUrl = "<%- BASE_URL %>/uploads/";
              const fullLogoUrl = baseUrl + brandLogoUrl;

              const brandTable = document.getElementById("brandTable");
              const newRow = document.createElement("tr");
              newRow.innerHTML = `
    <td><img class="pro-avatar" src="${fullLogoUrl}" alt="Brand Logo"></td>
    <td>${brandName}</td>
    <td> <span class="status active text-capitalize">${brandStatus}</span></td>
    <td><a href=""><i class="fa-solid fa-rotate-right"></i></a></td>
  `;

              brandTable.prepend(newRow); // Adds the new row at the beginning of the table

              // Clear success alert after a while
              setTimeout(() => {
                document.getElementById("successAlert").classList.add("d-none");
              }, 2000);

              // Clear the form and reset UI elements
              document.getElementById("brandName").value = "";
              document.getElementById("brandLogo").value = ""; // Reset the file input
              document.getElementById("preview").innerHTML = ""; // Clear the image preview
              brandSubmit.textContent = "Add brand"; // Reset the button text
            })
            .catch(function (error) {
              // Handle error
              document.getElementById("errorAlert").classList.remove("d-none");
              document.getElementById("successAlert").classList.add("d-none");
              document.getElementById("errorAlert").innerText =
                error.response.data.message;
              brandSubmit.textContent = "Marke hinzufügen";
              console.error(error);
            });
        });

        // Event listener for status changes
        document
          .querySelectorAll(".form-check-input.status-switch")
          .forEach((switchEl) => {
            switchEl.addEventListener("change", function () {
              const id = this.id;
              const status = this.checked ? "active" : "inactive";

              axios
                .patch(`${API_URL}/update-brand-status`, { id, status }, config)
                .then((response) => {
                  const statusSpan =
                    this.closest("tr").querySelector(".status");

                  // Update the <span> element's class and text
                  statusSpan.className = `status ${status} text-capitalize`;
                  statusSpan.textContent = status;
                  showToast("Status erfolgreich aktualisiert", "Success");
                })
                .catch((error) => {
                  console.error("Error:", error);
                  showToast("Fehler beim Aktualisieren der Marke", "Error");
                });
            });
          });
      });

      function showToast(message, type) {
        const toastEl = document.querySelector(".custom-toast");

        // Clear previous classes
        toastEl.classList.remove("d-none", "success", "error");

        // Add the relevant class based on the type of message
        if (type === "Success") {
          toastEl.classList.add("success");
        } else if (type === "Error") {
          toastEl.classList.add("error");
        }

        // Set the message
        toastEl.textContent = message;

        // Show the toast by removing 'd-none'
        toastEl.classList.remove("d-none");

        // Hide the toast after 4 seconds
        setTimeout(() => {
          toastEl.classList.add("d-none");
        }, 3000);
      }
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const logoutButton = document.querySelector("#logoutButton");

        if (logoutButton) {
          logoutButton.addEventListener("click", () => {
            document.cookie =
              "loginToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            console.log("Logged out successfully");
            window.location.href = "/";
          });
        }
      });
    </script>
  </body>
</html>
